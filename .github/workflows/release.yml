name: Release

on:
  workflow_dispatch:

env:
  REGISTRY: cr.yandex/crpadim3u20qi0o2f7jd
  IMAGE_NAME: app
  VERSION: ${{ github.run_number }}
  GH_TOKEN: ${{ github.token }}

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm ci
      - run: npm run lint
      - run: npm run test

  create-release-branch:
    runs-on: ubuntu-latest
    needs: checks
    steps:
      - uses: actions/checkout@v4
      - name: Create release branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b releases/${{ env.VERSION }}
          git push origin releases/${{ env.VERSION }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: checks
    steps:
      - uses: actions/checkout@v4
      - name: Login to Yandex Container Registry
        run: |
          echo "${{ secrets.YC_OAUTH_TOKEN }}" | docker login --username oauth --password-stdin cr.yandex
      - name: Build Docker image
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:${{ env.VERSION }} .
          docker tag $REGISTRY/$IMAGE_NAME:${{ env.VERSION }} $REGISTRY/$IMAGE_NAME:${{ env.VERSION }}_latest
      - name: Push Docker image
        run: |
          docker push $REGISTRY/$IMAGE_NAME:${{ env.VERSION }}
          docker push $REGISTRY/$IMAGE_NAME:${{ env.VERSION }}_latest

  tag-main:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}

  changelog-and-issue:
    runs-on: ubuntu-latest
    needs: tag-main
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get previous tag
        id: get_prev
        run: |
          PREV_TAG=$(git tag --sort=-creatordate | grep ^v | head -n 2 | tail -n 1)
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Get commits since previous tag
        id: get_commits
        run: |
          COMMITS=$(git log ${{ steps.get_prev.outputs.prev_tag }}..HEAD --pretty=format:"- %s")
          echo "commits<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Install GitHub CLI
        run: sudo apt-get install -y gh
      - name: Update CHANGELOG.md
        run: |
          {
            echo "## v${{ env.VERSION }} - $(date +%Y-%m-%d)"
            echo "$commits"
            echo ""
            cat CHANGELOG.md
          } > CHANGELOG.md.new
          mv CHANGELOG.md.new CHANGELOG.md
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git pull
          git checkout work-flow
          git add CHANGELOG.md
          git commit -m "chore: update changelog for v${{ env.VERSION }}"
          git push origin work-flow

          gh pr create --title "chore: update changelog for v${{ env.VERSION }}" \
                      --body "This PR updates the changelog for version v${{ env.VERSION }}" \
                      --base main \
                      --head work-flow

          gh pr review --approve
          gh pr merge --auto --merge

      - name: Create GitHub Issue
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "Release v${{ env.VERSION }}"
          content-file: ./release-info.md
          labels: release

      - name: Generate release-info.md
        run: |
          echo "## Release v${{ env.VERSION }}" > release-info.md
          echo "**Date:** $(date +%Y-%m-%d)" >> release-info.md
          echo "**Author:** ${{ github.actor }}" >> release-info.md
          echo "**Version:** v${{ env.VERSION }}" >> release-info.md
          echo "**Docker Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}\`" >> release-info.md
          echo "**Commits:**" >> release-info.md
          echo "$commits" >> release-info.md
